{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN7TL4BQkvGq/DZiAhmBp2i"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"javFdx51PdyE","executionInfo":{"status":"ok","timestamp":1731832304332,"user_tz":-480,"elapsed":8163,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import classification_report, confusion_matrix\n","from imblearn.over_sampling import SMOTE"]},{"cell_type":"code","source":["# Load the dataset\n","df = pd.read_csv('creditcard.csv')"],"metadata":{"id":"dwOZg9KqQgU2","executionInfo":{"status":"ok","timestamp":1731832459996,"user_tz":-480,"elapsed":3469,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["# Prepare the features and target variable\n","X = df.drop(columns=['Class'])  # Features: all columns except 'Class'\n","y = df['Class']  # Target variable: 'Class'"],"metadata":{"id":"gNd5zTUSQixX","executionInfo":{"status":"ok","timestamp":1731832467408,"user_tz":-480,"elapsed":2,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Check for missing values and handle them\n","print(\"\\nMissing Values in Each Column:\")\n","print(X.isnull().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gaSu3KInQlxx","executionInfo":{"status":"ok","timestamp":1731832472668,"user_tz":-480,"elapsed":3,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}},"outputId":"e741d12f-a56b-4c57-bff5-85bfb09f00b1"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Missing Values in Each Column:\n","Time      0\n","V1        0\n","V2        0\n","V3        0\n","V4        0\n","V5        0\n","V6        0\n","V7        0\n","V8        0\n","V9        0\n","V10       0\n","V11       0\n","V12       0\n","V13       0\n","V14       0\n","V15       0\n","V16       0\n","V17       0\n","V18       0\n","V19       0\n","V20       0\n","V21       0\n","V22       0\n","V23       0\n","V24       0\n","V25       0\n","V26       0\n","V27       0\n","V28       0\n","Amount    0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["# Drop rows with missing values for simplicity.\n","X = X.dropna()\n","y = y[X.index] # Ensure y matches X after dropping rows"],"metadata":{"id":"7Zcx-c0LQqIs","executionInfo":{"status":"ok","timestamp":1731832503167,"user_tz":-480,"elapsed":810,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# Feature Engineering: Include Hour and Amount categories without strings\n","X['Hour'] = (df['Time'] // 3600) % 24  # Convert seconds to hours"],"metadata":{"id":"_5oh2C0RQt5_","executionInfo":{"status":"ok","timestamp":1731832514305,"user_tz":-480,"elapsed":2,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# Create numerical bins for Hour (0-23)\n","X['HourCategory'] = pd.cut(X['Hour'], bins=[-1, 5, 11, 17, 23], labels=[0, 1, 2, 3])  # Binned as [0: Night, 1: Morning, 2: Afternoon, 3: Evening]\n","X['BusinessHours'] = X['Hour'].apply(lambda x: 1 if 9 <= x < 17 else 0)  # Business Hours as binary (1: Yes, 0: No)"],"metadata":{"id":"KXu605C_Qx-C","executionInfo":{"status":"ok","timestamp":1731832523898,"user_tz":-480,"elapsed":439,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# Amount Segmentation: Create bins for transaction amounts\n","bins_amount = [0, 50, 100, 200, 500, 1000, 5000]\n","X['AmountCategory'] = pd.cut(df['Amount'], bins=bins_amount, labels=[0, 1, 2, 3, 4, 5], right=False) # Binned amounts"],"metadata":{"id":"JxuWDTc0Q0kx","executionInfo":{"status":"ok","timestamp":1731832533532,"user_tz":-480,"elapsed":470,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Convert categorical variables to numeric using dummy variables\n","X = pd.get_dummies(X, columns=['AmountCategory', 'HourCategory'], drop_first=True)"],"metadata":{"id":"6UHr_LbnQ2Q-","executionInfo":{"status":"ok","timestamp":1731832541008,"user_tz":-480,"elapsed":809,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"1noS8PM5Q39j","executionInfo":{"status":"ok","timestamp":1731832548265,"user_tz":-480,"elapsed":1076,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# Handle class imbalance using SMOTE\n","smote = SMOTE(random_state=42)\n","X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)"],"metadata":{"id":"lBPw_Vt1Q505","executionInfo":{"status":"ok","timestamp":1731832557046,"user_tz":-480,"elapsed":1836,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# Standardize the features\n","scaler = StandardScaler()\n","X_train_resampled = scaler.fit_transform(X_train_resampled)\n","X_test = scaler.transform(X_test)"],"metadata":{"id":"6ior1fgqQ8WG","executionInfo":{"status":"ok","timestamp":1731832569884,"user_tz":-480,"elapsed":4312,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Build and train a Random Forest Classifier\n","model = RandomForestClassifier(random_state=42)\n","model.fit(X_train_resampled, y_train_resampled)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"1BL55KM1Q_fW","executionInfo":{"status":"ok","timestamp":1731833114630,"user_tz":-480,"elapsed":536111,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}},"outputId":"315aeeab-228a-4dfa-977d-575f20ed38f4"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(random_state=42)"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=42)</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["# Make predictions on the test set\n","y_pred = model.predict(X_test)\n","\n","# Evaluate the model's performance\n","print(\"Confusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))\n","\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2zp6bQs9TLSJ","executionInfo":{"status":"ok","timestamp":1731833167618,"user_tz":-480,"elapsed":2125,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}},"outputId":"b6783091-1506-4188-ebdd-f3a916bfd9a8"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix:\n","[[56853    11]\n"," [   15    83]]\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00     56864\n","           1       0.88      0.85      0.86        98\n","\n","    accuracy                           1.00     56962\n","   macro avg       0.94      0.92      0.93     56962\n","weighted avg       1.00      1.00      1.00     56962\n","\n"]}]},{"cell_type":"code","source":["# Additional Analysis: Feature Importance\n","feature_importances = model.feature_importances_\n","features = X.columns"],"metadata":{"id":"RQPGnV3uTSbn","executionInfo":{"status":"ok","timestamp":1731833180953,"user_tz":-480,"elapsed":463,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["# Create a DataFrame for feature importances and sort them\n","importance_df = pd.DataFrame({'Feature': features, 'Importance': feature_importances})\n","importance_df = importance_df.sort_values(by='Importance', ascending=False)\n","\n","print(\"\\nFeature Importances:\")\n","print(importance_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hc-uNiDdTdaM","executionInfo":{"status":"ok","timestamp":1731833225717,"user_tz":-480,"elapsed":1,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}},"outputId":"e6a321bd-466a-44fd-9d32-37533e691d87"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Feature Importances:\n","             Feature  Importance\n","14               V14    0.156835\n","4                 V4    0.145980\n","10               V10    0.120068\n","17               V17    0.106166\n","12               V12    0.099044\n","11               V11    0.073585\n","16               V16    0.047853\n","3                 V3    0.039741\n","9                 V9    0.028430\n","2                 V2    0.027380\n","7                 V7    0.024221\n","21               V21    0.015852\n","27               V27    0.011699\n","1                 V1    0.010941\n","18               V18    0.009847\n","0               Time    0.007726\n","8                 V8    0.006519\n","6                 V6    0.006394\n","29            Amount    0.006115\n","28               V28    0.006069\n","19               V19    0.005202\n","30              Hour    0.005100\n","5                 V5    0.004786\n","20               V20    0.004066\n","15               V15    0.003806\n","13               V13    0.003667\n","26               V26    0.003322\n","24               V24    0.003014\n","35  AmountCategory_4    0.002909\n","23               V23    0.002861\n","25               V25    0.002820\n","22               V22    0.002684\n","34  AmountCategory_3    0.001825\n","39    HourCategory_3    0.001064\n","33  AmountCategory_2    0.000630\n","38    HourCategory_2    0.000563\n","37    HourCategory_1    0.000476\n","31     BusinessHours    0.000433\n","36  AmountCategory_5    0.000187\n","32  AmountCategory_1    0.000123\n"]}]},{"cell_type":"code","source":["# Plotting feature importances\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","plt.figure(figsize=(10, 6))\n","sns.barplot(x='Importance', y='Feature', data=importance_df.head(10), palette='viridis')\n","plt.title('Top 10 Important Features for Fraud Detection')\n","plt.xlabel('Feature Importance')\n","plt.ylabel('Feature')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":651},"id":"RjAUCsQzTlIj","executionInfo":{"status":"ok","timestamp":1731833260361,"user_tz":-480,"elapsed":3615,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}},"outputId":"e642fdd9-3616-4d52-9b50-5da0a03bc04c"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-19-04cf7485df5d>:6: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.barplot(x='Importance', y='Feature', data=importance_df.head(10), palette='viridis')\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}